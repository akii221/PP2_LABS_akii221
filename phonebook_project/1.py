import psycopg2
import csv

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(
    dbname="phonebook",  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ—é –±–∞–∑—É
    user="postgres",        # ‚Üê –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL
    password="1937",  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –ø–∞—Ä–æ–ª—å
    host="localhost",
    port="5432"
)

cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cur.execute("""
    CREATE TABLE IF NOT EXISTS phonebook (
        id SERIAL PRIMARY KEY,
        username VARCHAR(100) NOT NULL,
        phone VARCHAR(20) NOT NULL
    );
""")
conn.commit()

# –í—Å—Ç–∞–≤–∫–∞ –∏–∑ CSV
def insert_from_csv():
    path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É: ")
    with open(path, newline='') as file:
        reader = csv.reader(file)
        for row in reader:
            if len(row) == 2:
                cur.execute("INSERT INTO phonebook (username, phone) VALUES (%s, %s);", (row[0], row[1]))
    conn.commit()
    print("‚úî –î–∞–Ω–Ω—ã–µ –∏–∑ CSV –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

# –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é
def insert_from_console():
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
    cur.execute("INSERT INTO phonebook (username, phone) VALUES (%s, %s);", (username, phone))
    conn.commit()
    print("‚úî –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def update_entry():
    search = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ")
    field = input("–ß—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å? (1 - –∏–º—è, 2 - —Ç–µ–ª–µ—Ñ–æ–Ω): ")
    if field == "1":
        new_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è: ")
        cur.execute("UPDATE phonebook SET username = %s WHERE username = %s OR phone = %s;", (new_name, search, search))
    elif field == "2":
        new_phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cur.execute("UPDATE phonebook SET phone = %s WHERE username = %s OR phone = %s;", (new_phone, search, search))
    conn.commit()
    print("‚úî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

# –ü–æ–∏—Å–∫
def query_data():
    choice = input("–§–∏–ª—å—Ç—Ä (1 - –ø–æ –∏–º–µ–Ω–∏, 2 - –ø–æ –Ω–æ–º–µ—Ä—É, 3 - –≤—Å—ë): ")
    if choice == "1":
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        cur.execute("SELECT * FROM phonebook WHERE username ILIKE %s;", ('%' + name + '%',))
    elif choice == "2":
        phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")
        cur.execute("SELECT * FROM phonebook WHERE phone LIKE %s;", ('%' + phone + '%',))
    else:
        cur.execute("SELECT * FROM phonebook;")

    rows = cur.fetchall()
    if rows:
        for row in rows:
            print(row)
    else:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

# –£–¥–∞–ª–µ–Ω–∏–µ
def delete_entry():
    choice = input("–£–¥–∞–ª–∏—Ç—å –ø–æ (1 - –∏–º–µ–Ω–∏, 2 - —Ç–µ–ª–µ—Ñ–æ–Ω—É): ")
    if choice == "1":
        name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
        cur.execute("DELETE FROM phonebook WHERE username = %s;", (name,))
    elif choice == "2":
        phone = input("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω: ")
        cur.execute("DELETE FROM phonebook WHERE phone = %s;", (phone,))
    conn.commit()
    print("‚úî –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    while True:
        print("\nüì± –ú–µ–Ω—é:")
        print("1 - –í–≤–æ–¥ –≤—Ä—É—á–Ω—É—é")
        print("2 - –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV")
        print("3 - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        print("4 - –ü–æ–∏—Å–∫")
        print("5 - –£–¥–∞–ª–∏—Ç—å")
        print("0 - –í—ã—Ö–æ–¥")

        option = input("–í—ã–±–æ—Ä: ")
        if option == "1":
            insert_from_console()
        elif option == "2":
            insert_from_csv()
        elif option == "3":
            update_entry()
        elif option == "4":
            query_data()
        elif option == "5":
            delete_entry()
        elif option == "0":
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")

    cur.close()
    conn.close()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
